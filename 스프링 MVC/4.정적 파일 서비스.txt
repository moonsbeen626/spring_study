4. 정적 파일 서비스

1. controller

(1)indexController
	public class indexController implements Controller {
		@Override 
		public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Eception{
			ModelAndView mv = new ModelAndView("index"); // viewresolver사용.
			mv.addObject("data", "hello"); 
			//mv.setViewName("/WEB-INF/view/index.jsp"); -> 이 부분 viewresolver에서 설정할것,

			return mv; //view에게 model을 전달
 		}
	}

2. xml
 
(1) WEB-INF/web.xml
	<servlet>	
		<servlet-name>dispatcher</servlet-name> 
		<servlet-class>org.springframework.sevlet.DispatcherServlet</setvlet-class> 
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name> 
		<url-pattern>/</url-pattern>
	</servlet-mapping>

(2) WEB-INF/dispatcher-servlet.xml
<beans xmlns="https://www.springframework.org/schema/bens"
	xmlns:mvc="http://www.springframework.org/schema/mvc" //이 부분 추가
	xmlns:xsi="https://www.w3.org/2001/XMLNSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
			https://www.springframework.org/schema/beans/spring-bean.xsd
			http://www.springframework.org/schema/mvc //이 부분 추가
			https://www.springframework.org/schema/beans/spring-mvc.xsd"> //이 부분 추가 - mvc태그 확장 위해

	<bean id="/index" class="패키지경로.indexController"></bean> 
	
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/"></property> //주소 앞부분
		<property name="suffix" value=".jsp"></property>
	</bean>

	<mvc:resources location="/static/" mapping="/**"></mvc:resources> //정적 파일(이미지, jsp ...) 찾는 위치와 매핑 경로 설정
</beans>

3. jsp

(1) WEB-INF/view/index.jsp -> index페이지를 WEB-INF/view밑으로 숨겨 사용자가 직접 요청할 수 없도록. 컨트롤러에서는 요청 가능.
	<body>
		<h1>${data}<h1>
	</body>

(2) index.jsp // 실제 index 페이지와 같은 이름 생성. 빈 파일. 이름만 같게해서 viewresolver 오류 발생하지 않도록. 실행을 위한 파일