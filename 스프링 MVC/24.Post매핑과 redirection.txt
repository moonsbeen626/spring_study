24. Post매핑과 redirection

1. controller

(1)HomeController
	@Controller
	@RequestMapping("/")
	HomeController { 
		
		@RequestMapping("index")
		@ResponseBody 
		public String index() { 
			return "hello"; 
		}

	}

(2)NoticeController
	@Controller
	@RequestMapping("/notice/")
	NoticeController {

		@Autowired
		private NoticeService noticeservice;
	
		@RequestMapping("list") 			
		public String list(@RequesParam(name = "p", defaultValue = "1") String page)	throws ClassNotFoundException, SQLException { 
			System.out.println(page); 
			return "notice.list";
		}
	
		@RequestMapping("detail")
		public String detail()	{
			return "notice.detail";
		}
	}

(3)NoticeAPIController
	@RestController("noticeAPIController") 
	@RequestMapping("/api/")
	NoticeAPIController	{

		@Autowired
		private NoticeService service;

		@RequestMapping("list");
		public List<Notice> list()	throws ClassNotFountException, SQLException {
			List<Notice> list = service.getList(1, "title", "");
			return list; 
		}

	}

(4)AdminNoticeController
	@Controller
	@RequestMapping("/admin/")
	AdminNoticeController	{

		@Autowirde
		private ServletContext ctx; 
		
		@RequestMapping("list")
		public String list()	{
		
		}
		
		//GET요청
		@GetMapping // get요청시 매핑
		public String reg() {
			return "admin.board"
		}

		//POST요청
		@PostMapping("reg") // 등록 요청시 매핑
		//@ResponseBody 제거. 리턴값 문자열이 아니므로.
		public String reg(String title, String content, MultipartFile[] files, HttpServletRequest request) {

			for(MultipartFile file : files)	{ 	
				String fileName = file.getOriginalFilename(); 
				long size = file.getSize();
				System.out.println(fileName); 
			
				ctx = request.getServletContext(); 	

				String webPath = "/static/upload"; 
				String realPath = ctx.getRealPath(webPath);
				System.out.println(realPath); 
			
				File savePath = new File(realPath);		
				if(!savePath.exists()) {
					savePath.mkdirs(); 
				}
			
				realPath += File.separator + fileName; 
				File saveFile = new File(realPath); 
				file.transfer(saveFile); 
			}
			
			return "admin.board"; //데이터 반환
		}

		@RequestMapping("edit") //수정
		public String list()	{
		
		}

		@RequestMapping("del") //삭제
		public String list()	{
		
		}	

	}

2. Service

(1)JDBCNoticeService 
	@Service
	JDBCNoticeService implements NoticeService{ 
		
		@Autowired 
		private DataSource dataSource; 
 	
		...
	}

(2) NoticeService(Interface)
	interface NoticeService {	
		List<Notice> getList(int page, String field, String query) throws ClassNotFoundException, SQLException;
		nt getCount() throws ClassNotFoundException, SQLException;
		int insert(Notice notice) throws SQLException, ClassNotFoundException;
		int update(Notice notice) throws SQLException, ClassNotFoundException;
		public int delete(int id) throws ClassNotFoundException, SQLException;
	}

3. Entity(DTO)

(1) Notice
	Notice{
		private int id;
		private String title;
		private String writerId;
		private Date regDate;
		private String content;
		private int hit;
		private String files;
	
		public Notice() {	}

		public Notice(int id, String title, String writerId, Date regDate, String content, int hit, String files) {
			...
		}

		//기타 getter, setter들

	}

4. xml
 
(1) WEB-INF/web.xml
	<listener> 
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<context-param> 
		<param-name>contextConfigLocation</param-name>
		<param-value> 
			/WEB-INF/spring/service-context.xml
			/WEB-INF/spring/security-context.xml
		</param-value>
	</context-param>

	<servlet>	
		<servlet-name>dispatcher</servlet-name> 
		<servlet-class>org.springframework.sevlet.DispatcherServlet</setvlet-class> 
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup> 
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name> 
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<filter> 
		<filter-name>charaterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>charaterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>


(2) WEB-INF/tiles.xml -> tiles지시서
	<!DOCTYPE tiles-definitions PUBLIC
      	 "-//Apache Software Foundation//DTD Tiles Configuration 3.0//EN"
      	 "http://tiles.apache.org/dtds/tiles-config_3_0.dtd">
	<tiles-definitions>
		<definition name="root.*" template="/WEB-INF/view/inc/rootLayout.jsp"> 
    			<put-attribute name="header" value="/WEB-INF/view/inc/header.jsp" />
			<put-attribute name="body" value="/WEB-INF/view/{1}.jsp" />
    			<put-attribute name="footer" value="/WEB-INF/view/inc/footer.jsp" />
  		</definition>
  		<definition name="notice.*" template="/WEB-INF/view/inc/layout.jsp"> 
    			<put-attribute name="header" value="/WEB-INF/view/inc/header.jsp" />
			<put-attribute name="body" value="/WEB-INF/view/notice/{1}.jsp" /> 
    			<put-attribute name="footer" value="/WEB-INF/view/inc/footer.jsp" />
  		</definition>
	</tiles-definitions>

(3) WEB-INF/spring 
	1) /servlet-context.xml	
		<context:component-scan base-package="패키지경로" /> 
		
		<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver"> 
			<property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
			<property name="order" value="1" />
		</bean>
	
		<bean class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
			<property name="definitions" value="/WEB-INF/tiles.xml" />
		</bean>
		
		<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property name="prefix" value="/WEB-INF/view/"></property>
			<property name="suffix" value=".jsp"></property>
			<property name="order" value="2" />.
		</bean>

		<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
			<property name="maxUploadSize" value="314572800" /> 
		</bean>

		<mvc:resources location="/static/" mapping="/**"></mvc:resources>
		<mvc:annotation-driven>
			<mvc:message-converters>
				<bean class="org.springframework.http.converter.StringHrrpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/html;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</mvc:message-converters>
		</mvc:annotation-driven>

	2) /service-context.xml
		<context:component-scan base-package="패키지경로" /> 
	
		<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource" > 
			<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"></property> 
			<property name="url" value="jdbc:oracle:thin:@localhost:1521/xepdb1"></property>
			<property name="username" value="moon"></property>
			<property name="password" value="1234"></property>
		</bean>
		
	3) /security-context.xml	
5. jsp

(1) WEB-INF/view
	1. /index.jsp 
		<main class="main">
			<nav id ="member-menu" class="linear-layout">
				<h1 class="hidden">공지사항</h1>
				<ul class="linear-layout">
					<li><a href="/notice/list" /></li> 
				</ul>
			</nav>
		</main>
	
	2. /notice
		1) /list.jsp
			<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %> 
			<main class="main">
				<div class="notice margon-top">
					<h3 class="hidden">공지사항 목록</h3>
					<table class="table">
						<thead>
							<tr><th class="w60">번호</th>
							<th class="expand">제목</th>
							<th class="w100">작성자</th>
							<th class="w100">작성일</th>
							<th class="w60">조회수</th></tr>
						</thead>
						<tbody>
							<c:forEach var="n" items="${list}"> 
								<tr><td>${n.id}</td>
								<td class="title text-align-center"><a href="detail">${n.title}</td> 
								<td>${n.writerId}</td>
								<td>${n.regDate}</td>
								<td>${n.hit}</td>
							</c:forEach>
						</tbody>
			</main>

		2) /detail.jsp
			<main class="main">
				<h1>detail페이지</h1>
			</main>

	3. /inc -> 공통 모듈 관리
		1) /header.jsp 	
			<header id="header"> 
				<h1>공통 헤더 부분</h1>
			</header>

		2) /footer.jsp
			<footer id="footer">
				<h1>공통 footer부분</h1>
			</footer>

		3) /layout.jsp -> 모듈을 꽂아넣을 jsp
			<%@ taglib prefix="tiles" uri="http://tiles.apache.org/tags-tiles" %> 
			
			<body>
				<!-- header부분-->
				<tiles:insertAttribute name="header" /> 
				<!-- main 부분 -->
				<tiles:insertAttribute name="body" />
				<!-- footer 부분 -->
				<tiles:insertAttribute name="footer" />
			</body>
		
		4) /rootLayout.jsp -> Root페이지를 위한 layout
			<body>
				<!-- header부분-->
				<tiles:insertAttribute name="header" /> 
				<!-- main 부분 -->
				<tiles:insertAttribute name="body" />
				<!-- footer 부분 -->
				<tiles:insertAttribute name="footer" />
			</body>

	4. /admin 
		1) /reg.jsp
			<form action="reg" method="post" enctype="multipart/form-data"> 
				<td class="text-align-left text-indent text-strong"><input type="text" name="title"/></td>
				<td colspan="4"><textarea class="content" name ="content"></td>
				<th>첨부파일</th>
				<td colspan="3" class="text-align-left"><input type="file" name="files"/></td> //다중 파일 업로드 
				<th>첨부파일</th>
				<td colspan="3" class="text-align-left"><input type="file" name="files"/></td> //다중 파일 업로드 
			</form>
		2) /board.jsp //관리자 페이지
(2) index.jsp 
	