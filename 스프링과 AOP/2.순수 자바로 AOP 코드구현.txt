2. 순수 자바로 AOP 코드구현

1. class 
(1)program(기본) class
 	void main(...)	{
		Exam exam = new NewlecExam(1,1,1,1);

		//proxy라는 대리인 사용하여 cross-cutting concern업무까지 실행하도록.
		Exam proxy = (Exam) Proxy.newProxyInstance(NewlecExam.class.getClassLoder(),  	// loder(자료형)
				new Class[] {Exam.class},		// interfaces(복수형)
				new InvocationHandler() {		// h(업무 꽂을 부분. 핸들러). 인터페이스 구현한 invocationHandler 익명 클래스 작성.
					@Override		
						public Object invoke(Object proxy, Method method, Object[] args)	 throw...{
							long start = System.currentTimeMillis();

							//실제 업무 호출
							Object result = method.invoke(exam, args) // method - 실제 업무 담당하는 메소드 호출기능. exam - 실제 업무 객체, args - 호출할 메소드(total)가 가지고 있는 파라미터

							long end= System.currentTimeMillis();

							print (end - start)만큼 시간 걸림 출력;	

							return result ; //object형 반환 -> 형변환 필요.
						}				

					})
														
		prin proxy.total, proxy.avg출력;
	}

(2)NewlecExam class	
	class NewlecExam implements Exam 	{
		private int kor
		private int eng

		private int math
		private int com; 
		
		//getter/setter생성

		//기본생성자, 모든 필드 사용하는 생성자 생성	

		@Override
		total()	{//cross-cutting concern추가 되도록.
			//long start = System.currentTimeMillis(); -> 이렇게 실제 작동 함수 안에 코드를 직접 작성하는 것을 aop방식으로 바꿀것.

			int result = kor + eng + math + com;

			//long end= System.currentTimeMillis();

			//print (end - start)만큼 시간 걸림 출력;

			return result;
		}		

		
		@Override		
		avg()	{
			float total() / 4.0f; 
			
			return float; 
		}
	}

2. interface

(1)Exam interface
	interface Exam	{
		int total(); //총 합 반환		
		float avg(); //평균 반환
	}


	