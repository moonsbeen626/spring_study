스프링 시큐리티와 OAuth2.0으로 로그인 기능 구현하기 - 개선

1. 어노테이션 기반으로 개선하기
	(1). 세션값 가져오기
		1) 개선할 코드
			SessionUser user = (SessionUser) httpSession.getAttribute("user");
		2) 개선이 필요한 이유
			= 세션 값이 필요할 때마다 계속 반복해서 작성해 주어야 한다.
		3) 개선 방법 순서
			1. @LoginUser 어노테이션 생성 
			코드)
				@Target(ElementType.PARAMETER) //만든 어노테이션이 생성될 수 있는 위치 지정. 여기선 PARAMETER이니 파라미터로 선언된 객체에서만 사용 가능.
				@Retention(RetentionPolicy.RUNTIME) //어느 시점까지 어노테이션의 메모리를 가져갈지 지정. RUNTIME시 JVM이 런타임환경을 구성하고 런타임 종료시까지 메모리가 살아있음.
				public @interface LoginUser { //@interface로 이 class를 어노테이션 class로 지정. 여기선 @LoginUser라는 이름의 어노테이션 생성
				}
			2. 같은 위치에 HandlerMethodArgumentResolver구현한 LoginUserArgumentResolver생성. 
			HandlerMethodArgumentResolver) 조건에 맞는 경우 메소드가 있다면 구현체가 지정한 값으로 해당 메소드의 파라미터로 넘길 수 있음.
			코드)
				@RequiredArgsConstructor
				@Component //직접 작성한 class를 ioc커네이너에 bean으로 등록하기 위함.
				public class LoginUserArgumentResolver implements HandlerMethodArgumentResolver {  

    					private final HttpSession httpSession;

    					@Override
    					// 컨트롤러의 메소드에서 특정 파라미터를 지원하는지 판단. 여기서는 파라미터에 @LoginUser어노테이션이 붙어있고, 파라미터 클래스 타입이 SessionUser.class인 경우 true반환.
   					public boolean supportsParameter(MethodParameter parameter) {
       						boolean isLoginUserAnnotation = parameter.getParameterAnnotation(LoginUser.class) != null;
       						boolean isUserClass = SessionUser.class.equals(parameter.getParameterType());
       						return isLoginUserAnnotation && isUserClass;
    					}

    					@Override
    					//파라미터에 전달할 객체 생성. 여기선 세션에서 객체를 가져옴.
    					public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {
        						return httpSession.getAttribute("user");
    					}
				}
			3. WebMvcConfigurer 구현한 WebConfigt 생성.
			WebMvcConfigurer) @EnableWebMvc어노테이션이 자동으로 설정해 주는 세팅 값에 사용자가 원하는 세팅 추가 가능
			코드)
				@RequiredArgsConstructor
				@Configuration // 직접 제어가 불가능한 외부 라이브러리 또는 설정을 ioc컨테이너에 bean으로 등록하기 위함
				public class WebConfig implements WebMvcConfigurer {

    					private final LoginUserArgumentResolver loginUserArgumentResolver;

    					@Override
    					//HandlerMethodArgumentResolver는 항상 아래 메소드를 통해 추가해야 스프링에서 인식 가능.
    					public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {
        					resolvers.add(loginUserArgumentResolver);
    					}
				}
			4. 반복되는 코드 수정
			코드 삭제) 컨트롤러에서 SessionUser user = (SessionUser) httpSession.getAttribute("user"); 코드 찾아 삭제.
			//어느 컨트롤러든지 @LoginUser을 사용하면 세션 정보를 가져올 수 있음.
    			public String index(Model model, @LoginUser SessionUser user) { //param에 추가
				...
			}

	(2). 세션 저장소 변경하기
		1) 개선할 코드
			세션이 내장 톰캣의 메모리에 저장되게 설정되어있음.
		2) 개선이 필요한 이유
			애플리케이션 재실행시 초기화됨. 즉, 배포 때마다 톰캣이 재시작됨. 
			2대 이상의 서버에서 서비스화 하기 위해선 톰캣마다 세션 동기화를 설정해 주어여함.
		3) 개선 방법) DB를 세션 장소로 사용
		4) 개선 방법 순서)
			1. bulid.gradle에 srping-session-jdbc등록
			코드)
				compile('org.springframework.session:spring-session-jdbc')
			2. application.properties에 코드 추가
			코드)
				#세션 저장 장소를 jdbc로 선택하도록 코드 추가
				spring.session.store-type=jdbc
			3. 로그인 테스트
			확인) 로그인 후 DB에 접속하여 SPRING_SESSION, SPRING_SESSION_ATTRIBUTES 테이블이 자동으로 생성되었는지 확인.