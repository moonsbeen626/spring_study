
9. 어노테이션을 이용한 객체 생성

1. class

(1)program(기본) class
	void main(...)	{

		ApplicationContext context = new ClassPathXmlApplicationContext("패키지경로/setting.xml");
		ExamConsole console = context.getBean(ExamConsole .class) // ioc컨테이너에서 가지고옴. Examconsole객체의 형태와 일치하는 class찾아서 가지고 옴.
		//ExamConsole console = (ExamConsole) context.getBean("console") //ioc컨테이너에서 console이라는 이름의 객체를 가지고 옴. 형변환 필요. 위 코드와 동작 같음. 
									// -> but component로 객체 선언시 componenet에 이름 설정 필요.
		console.print();
	}

(2)NewlecExam class	
	@Component // inlineExamConsole 사용 위해 함께 component.
	class NewlecExam implements Exam 	{
		
		@Value("20")//기본값 설정.
		private int kor
		@Value("10")
		private int eng

		private int math
		private int com; 
		
		//getter/setter생성

		//기본생성자, 모든 필드 사용하는 생성자 생성	

		@Override
		total()	{
			return kor + eng + math + com;
		}		

		
		@Override		
		avg()	{
			return total() / 4.0f; 
		}
	}

(3)InlineExamConsole class
	@Component // 객체 생성을 setting에서 하지 않고 바로.
	//@Component("console") //main함수에서 이름을 찾아서 가지고 오는 방식 사용시 필요한 설정.
	class InlineExamConsole implements ExamConsole 	{

		@Autowired(required = true) // 무조건 ioc컨테이너에 객체가 있어 바인딩이 되어야 함.
		//@Qulifier("exam1"); setting에 exam1이 없으니 지워줌.
		private Exam exam; //기본 생성자 호출하면서 바인딩. 
		
		InlineExamConsole(){}// 기본 생성자
		InlineExamConsole(Exam exam) this.exam = exam; //생성자			

		@Override
		void print()	{
			if(exam == null) // 바인딩시 문제발생.무조건 컨테이너 안에 객체가 있어야 함. 그래서 required옵션 줌.
				"total is " + 0 + " avg is " + 0 출력
			else
				"total is " + exam.total() + " avg is " + exam.agv() 출력
		}

	
		@Override
		setExam(Exam exam)	{ 
			this.exam = exam;
		}
	}

(4)GridExamConsole class
	class GridExamConsole implements ExamConsole 	{
		private Exam exam;

		GridExamConsole(){} //기본 생성자
		GridExamConsole(Exam exam) this.exam = exam; //생성자			

		@Override
		void print()	{
			"total is " + exam.total() + " avg is " + exam.agv() 를 grid모양으로 출력
		}
		
		@Override
		set(Exam exam)	{
			this.exam = exam;
		}
	}

2. interface

(1)Exam interface
	interface Exam	{
		int total(); //총 합 반환		
		float avg(); //평균 반환
	}



(2)ExamConsole interface	
	interface ExamConsole	{
		void print();
		void set(Exam exam);
	}

3. xml

(1)setting.xml	
	
	<!--<context:annotation-config />--> component스캔할때 내부 annotation들 읽어오므로 지워도 됨. 
	<context:component-scan base-package="패키지경로"/> //component 읽을 수 있도록 경로 설정. scan된 component들은 ioc컨테이너에 담김. 없으면 error

	<!--<bean id="console" class="패키지경로.InlineExamConsole"></bean>--> //이 부분을 component어노테이션으로 객체를 생성하도록 변경.

4. 적용 가능한 어노테이션
	(1) @Component의 하위 항목
		1. @Controller
			-  사용자 입출력 담당
			- ex) @RequestMapping, @GetMapping, ...
		2. @Service
			- 사용자 요청에 맞는 데이터 서비스 제공
			- 업무, 트랜젝션 단위
		3. @Repository (DAO)
			- 데이터 제공